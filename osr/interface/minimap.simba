(*
Minimap
=======
Methods to handle Minimap. Extends SRL's Minimap.
*)

{$DEFINE WL_MINIMAP_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

(*
Minimap.SetCompassAngle
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMinimap.SetCompassAngle(Degrees: Double; Accuracy: Double = 5); override;

Overrides SRL's default **Minimap.SetCompassAngle()** to check if we are logged in and log back in if it times out.
*)
procedure TRSMinimap.SetCompassAngle(Degrees: Double; Accuracy: Double = 5); override;
const
  DEG_PER_PIXEL = 2.83;
var
  Available: TBox;
  Remaining: Int32;
  LeftToRight: Boolean;
  Destination: TPoint;
  MousePosition: TPoint;
  Pixels: Int32;
  T: UInt64;
  CustomMouse: TMouse;
begin
  CustomMouse := Mouse;
  CustomMouse.MissChance := 0;
  CustomMouse.IdleInterval := 0;

  Available := GetClientBounds().Expand(-10);
  Degrees := FixD(Degrees);
  Remaining := Round(Self.GetCompassAngle() - Degrees);

  T := GetTickCount() + Round(SRL.TruncatedGauss(6000, 8000));

  while (Abs(Remaining) > Accuracy) do
  begin
    if (GetTickCount() > T) then
    begin
      Self.DebugLn('SetCompassAngle timed out.');
      if not RSClient.IsLoggedIn() then
        Login.LoginPlayer();
      Exit;
    end;

    Pixels := Round(Abs(SRL.DeltaAngle(Self.GetCompassAngle(), Degrees)) * DEG_PER_PIXEL);
    LeftToRight := ((Remaining > 0) and (Abs(Remaining) <= 180)) or ((Remaining < 0) and (Abs(Remaining) > 180));

    MousePosition := CustomMouse.Position();

    if LeftToRight then
    begin
      if (not Available.Contains(MousePosition)) or ((MousePosition.Y + 200 > Available.Y2) or (MousePosition.X + Pixels > Available.X2)) then
      begin
        CustomMouse.Move([Available.X1, Available.Y1, Available.X1 + 200, Available.Y1 + 200]);

        MousePosition := CustomMouse.Position();
      end;

      Destination.X := MousePosition.X + Pixels;
      Destination.Y := Random(MousePosition.Y + 100, Available.Y2);
    end else
    begin
      if (not Available.Contains(MousePosition)) or ((MousePosition.Y + 200 > Available.Y2) or (MousePosition.X - Pixels < Available.X1)) then
      begin
        CustomMouse.Move([Available.X2 - 200, Available.Y1, Available.X2, Available.Y1 + 200]);

        MousePosition := CustomMouse.Position();
      end;

      Destination.X := MousePosition.X - Pixels;
      Destination.Y := Random(MousePosition.Y + 200, Available.Y2);
    end;

    CustomMouse.Hold(MOUSE_MIDDLE);
    CustomMouse.Move(Destination);
    CustomMouse.Release(MOUSE_MIDDLE);

    Wait(100, 1000, wdLeft);

    Remaining := Round(Self.GetCompassAngle() - Degrees);
  end;
end;

(*
Minimap.WaitMoving
~~~~~~~~~~~~~~~~~~
.. pascal:: procedure TRSMinimap.WaitMoving(doAntiban: Boolean = True);

Gives **Minimap.WaitPlayerMoving** the ability to perform antiban tasks while moving.

Example
-------

  Minimap.WaitMoving();
*)
procedure TRSMinimap.WaitMoving(doAntiban: Boolean = True);
var
  timeout, countdown: TCountDown;
  moving: Boolean;
begin
  timeout.Init(Round(SRL.TruncatedGauss(20000, 25000)));

  countdown.Init(Round(SRL.TruncatedGauss(500, 1500)));
  countdown.timeout := GetTickCount() + Round(SRL.TruncatedGauss(2500, 3500));

  repeat
    if doAntiban then
      Antiban.WalkingTasks();

    moving := Self.IsPlayerMoving();

    if moving then
      countdown.Restart();

  until timeout.IsFinished() or (not moving and countdown.IsFinished()) or not Self.HasFlag();
end;

(*
Minimap.IsEnvenomed
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.IsEnvenomed();

**Minimap.IsEnvenomed** returns true if we are envenomed.

Example
-------

  WriteLn Minimap.IsEnvenomed;
*)
function TRSMinimap.IsEnvenomed(): Boolean;
begin
  Result := SRL.CountColor(CTS0(1515790, 9), Self.GetHPCircle().Bounds()) > 0;
end;

//TODO: ADD TO SRL, the current one doesn't work.
function TRSMinimap.IsPoisoned(): Boolean; override;
begin
  Result := SRL.CountColor(CTS0(16391, 3), Self.GetHPCircle().Bounds()) > 0;
end;

(*
Minimap.HasStamina
~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.HasStamina();

**Minimap.HasStamina** returns true if we are stamina boosted.

Example
-------

  WriteLn Minimap.HasStamina;
*)
function TRSMinimap.HasStamina(): Boolean;
begin
  Result := SRL.CountColor(CTS0(2709951, 38), Self.GetRunCircle().Bounds()) > 0;
end;

(*
Minimap.OnGroundLevel
~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.OnGroundLevel(threshold: Int32 = 3300): Boolean;

**Minimap.OnGroundLevel** returns true if we are likely to be on the ground level.
This works by counting the amount of black in the minimap and might give false positives/negatives if there's more than 3500 black pixels on the minimap.
A **threshold** can be set for this counting, the default being 3300.

Example
-------

  WriteLn Minimap.OnGroundLevel();
*)
function TRSMinimap.OnGroundLevel(threshold: Int32 = 3300): Boolean;
var
  p: TPoint;
  tpa, finalTPA: TPointArray;
begin
  if SRL.FindColors(tpa, 0, Self.Bounds()) = 0 then
    Exit(True);

  for p in tpa do
    if SRL.PointInPoly(p, Self.GetPolygon()) then
      finalTPA += p;

  Result := Length(finalTPA) < threshold;
end;


(*
Minimap.InPOH
~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.InPOH();

**Minimap.InPOH** returns true if we are in a POH.
This might give false positives if you are upstairs or in a place with few colors on the minimap.
It might also give false negatives if the POH is crowded.

Example
-------

.. code-block:: pascal

  WriteLn Minimap.InPOH();
*)
function TRSMinimap.InPOH(): Boolean;
var
  tpa: TPointArray;
  colorArray: TIntegerArray;
  blackAmount: Int32;
  colorAmount: Int32;
begin
  tpa := Self.GetPolygon().Connect().ShapeFill().Erode(10);

  colorArray := GetColors(tpa);
  blackAmount := Length(colorArray.FindAll(0));

  ClearSameIntegers(colorArray);

  colorAmount := Length(colorArray);
  Result := (colorAmount > 3) and (colorAmount < 25) and (blackAmount < 3500);
end;


(*
Minimap.FindRedArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMinimap.FindRedArrow(out tpa: TPointArray): Boolean;
  function TRSMinimap.FindRedArrow(): Boolean; overload;

Returns true if there's a red arrow on minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln Minimap.FindRedArrow();
*)
function TRSMinimap.FindRedArrow(out tpa: TPointArray): Boolean;
begin
  Result := (SRL.FindColors(tpa, CTS0(255, 0), Self.Bounds()) > 0) and
            (Length(tpa) <= 84);

end;

function TRSMinimap.FindRedArrow(): Boolean; overload;
var
  tpa: TPointArray;
begin
  Result := Self.FindRedArrow(tpa);
end;

(*
Minimap.FindYellowArrow
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMinimap.FindYellowArrow(out tpa: TPointArray): Boolean;
  function TRSMinimap.FindYellowArrow(): Boolean; overload;

Returns true if there's a yellow arrow on minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.FindYellowArrow();
*)
function TRSMinimap.FindYellowArrow(out tpa: TPointArray): Boolean;
begin
  Result := (SRL.FindColors(tpa, CTS0(1767418, 0), Self.Bounds) > 0) and
            (Length(tpa) <= 16);

end;

function TRSMinimap.FindYellowArrow(): Boolean; overload;
var
  tpa: TPointArray;
begin
  Result := Self.FindYellowArrow(tpa);
end;

(*
MainScreen.FindArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMainScreen.FindArrow(out tpa: TPointArray): Boolean;
  function TRSMainScreen.FindArrow(): Boolean; overload;

Returns true if there's a red or yellow arrow on screen.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln MainScreen.FindArrow();
*)
function TRSMinimap.FindArrow(out tpa: TPointArray): Boolean;
begin
  Result := Self.FindYellowArrow(tpa) or Self.FindRedArrow(tpa);
end;

function TRSMinimap.FindArrow(): Boolean; overload;
begin
  Result := Self.FindYellowArrow() or Self.FindRedArrow();
end;


(*
Minimap.WaitRedArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMinimap.WaitRedArrow(tpa: TPointArray; waitTime: Int32 = 600; interval: Int32 = -1): Boolean;
  function TRSMinimap.WaitRedArrow(waitTime: Int32 = 600; interval: Int32 = -1): Boolean;

Waits **waitTime** for a Red arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.WaitRedArrow();
*)
function TRSMinimap.WaitRedArrow(out tpa: TPointArray; waitTime: Int32 = 120; interval: Int32 = -1): Boolean;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindRedArrow(tpa), interval, waitTime);
end;

function TRSMinimap.WaitRedArrow(waitTime: Int32 = 120; interval: Int32 = -1): Boolean; overload;
var
  tpa: TPointArray;
begin
  Result := Self.WaitRedArrow(tpa, waitTime, interval);
end;

(*
Minimap.WaitYellowArrow
~~~~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMinimap.WaitYellowArrow(tpa: TPointArray; waitTime: Int32 = 600; interval: Int32 = -1): Boolean;
  function TRSMinimap.WaitYellowArrow(waitTime: Int32 = 600; interval: Int32 = -1): Boolean;

Waits **waitTime** for a yellow arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow tip.

Example
-------

  Writeln Minimap.WaitYellowArrow();
*)
function TRSMinimap.WaitYellowArrow(out tpa: TPointArray; waitTime: Int32 = 120; interval: Int32 = -1): Boolean;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindYellowArrow(tpa), interval, waitTime);
end;

function TRSMinimap.WaitYellowArrow(waitTime: Int32 = 120; interval: Int32 = -1): Boolean; overload;
var
  tpa: TPointArray;
begin
  Result := Self.WaitYellowArrow(tpa, waitTime, interval);
end;

(*
Minimap.WaitArrow
~~~~~~~~~~~~~~~~~
.. pascal::
  function TRSMinimap.WaitArrow(tpa: TPointArray; waitTime: Int32 = 600; interval: Int32 = -1): Boolean;
  function TRSMinimap.WaitArrow(waitTime: Int32 = 600; interval: Int32 = -1): Boolean;

Waits **waitTime** for a yellow or red arrow to appear on Minimap.
If a TPointArray is passed as a parameter it will return with the location of the arrow.

Example
-------

  Writeln Minimap.WaitArrow();
*)
function TRSMinimap.WaitArrow(out tpa: TPointArray; waitTime: Int32 = 120; interval: Int32 = -1): Boolean;
begin
  if (interval = -1) then
    interval := SRL.TruncatedGauss(50, 200);

  Result := WaitUntil(Self.FindArrow(tpa), interval, waitTime);
end;

function TRSMinimap.WaitArrow(waitTime: Int32 = 120; interval: Int32 = -1): Boolean; overload;
var
  tpa: TPointArray;
begin
  Result := Self.WaitArrow(tpa, waitTime, interval);
end;

(*
Minimap.HasDotUnder
~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSMinimap.HasDotUnder(): Boolean;

Checks if the player has a dot under it. This will include all types of ERSMinimapDot.

Example
-------

  Writeln Minimap.HasDotUnder();
*)
function TRSMinimap.HasDotUnder(): Boolean;
var
  p: TPoint;
  tpa: TPointArray;
begin
  p := Self.Center();
  if SRL.FindColors(tpa, 65536, Box(p, 2, 2)) > 0 then
    Result := tpa.Find([p.X, p.Y + 2]) > -1;
end;


