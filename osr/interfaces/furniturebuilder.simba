(*
FurnitureBuilder
================
Methods to interact with the FurnitureBuilder interface.

UNFINISHED! AND NOT WORKING!
*)

{$DEFINE WL_FURNITUREBUILDER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSFurnitureBuilder = type TRSTitledInteface;

(*
FurnitureBuilder.IsOpen
~~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSFurnitureBuilder.IsOpen(WaitForItems: Boolean = True): Boolean;

Returns true if the FurnitureBuilder is visible.

**WaitForItems** determines if the method waits 1-2 seconds items to load as there
can be a small delay before items are visible.
*)
function TRSFurnitureBuilder.IsOpen(): Boolean;
begin
  Result := False;
end;



function TRSFurnitureBuilder.IsOpen(WaitTime: Int32; Interval: Int32 = -1): Boolean; overload;
begin
  if (Interval = -1) then
    Interval := SRL.TruncatedGauss(50, 1500);

  Result := WaitUntil(Self.IsOpen(), Interval, WaitTime);
end;

procedure TRSFurnitureBuilder.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;
  // Add stuff here
end;

(*
FurnitureBuilder.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: procedure FurnitureBuilder.Setup;

Initializes FurnitureBuilder variables.

.. note:: This is automatically called on the **FurnitureBuilder** variable.
*)
procedure TRSFurnitureBuilder.Setup(); override;
begin
  inherited;

  Self.Name := 'FurnitureBuilder';
end;

procedure TRSFurnitureBuilder.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

   case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -1];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, 2];
        Self.Alignment.Bottom := [@InterfaceArea.Y2, -2];
        Self.Alignment.Center.MaxWidth := 488;
        Self.Alignment.Center.MaxHeight := 800;
      end;
  end;
end;



(*
FurnitureBuilder.Close
~~~~~~~~~~~~~~~~~~~~~~
.. pascal:: function TRSFurnitureBuilder.Close(UseKeyboard: Boolean = False): Boolean;

Closes the furniture builder, Depending on `UseKeyboard` the function will either click the button
or press backspace.

Example
-------

 WriteLn FurnitureBuilder.Close();
*)
function TRSFurnitureBuilder.Close(UseKeyboard: Boolean = False): Boolean;
begin
  Result := Self.ClickCloseButton(UseKeyboard) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;


(*
var FurnitureBuilder
~~~~~~~~~~~~~~~~~~~~
  Global FurnitureBuilder variable.
*)
var
  FurnitureBuilder: TRSFurnitureBuilder;



procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  FurnitureBuilder.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  FurnitureBuilder.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  FurnitureBuilder.Draw(Bitmap);
end;

