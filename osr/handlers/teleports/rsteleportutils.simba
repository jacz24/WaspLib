{$DEFINE SKUNK_TELEPORT_UTILS}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}
type
  ETeleportType = (
    NORMAL_MAGIC,
    ANCIENT_MAGICKS,
    LUNAR_MAGIC,
    ARCEUUS_MAGIC,
    JEWELLERY,
    OTHER,
    SCROLL,
    FAIRY_RING,
    DIARY_ITEM
  );
  EFairyTeleportItem = (
    DIARY,
    DRAMEN,
    LUNAR,
    UNAVAILABLE
  );
  TTeleportLocation = record
    worldPoint: TPoint;
    teleportType: ETeleportType;
    magicLevel: Int32;
    item: TRSItem;
    destination: String;
    dispatcherRing: Boolean;
  end;

  TTeleportJewellery = record
    unchargedID: Int32;
    chargedIDs: TIntegerArray;
    unchargedName: TRSItem;
    chargedNames: TRSItemArray;
  end;

  TDiaryTeleportItem = record
    baseItem: TRSItem;
    numberedItems: TRSItemArray;
  end;

function setupTeleportJewellery(unchargedName: TRSItem; chargedName: TRSItem): TTeleportJewellery;
begin
  result.unchargedName := unchargedName;
  result.chargedNames := chargedName.GetArray();
end;

function setupDiaryTeleportItem(baseItem: TRSItem): TDiaryTeleportItem;
var
  i: Int32;
begin
  result.baseItem := baseItem;
  for i in [1..4] do
    result.numberedItems += baseItem + " " + ToString(i);
  WriteLn result;
end;

function setupTeleportLocation(teleportType: ETeleportType; destination: String; level: Int32; worldPoint: TPoint): TTeleportLocation;
begin
  result.worldPoint := worldPoint;
  result.destination := destination;
  result.magicLevel := level;
  result.teleportType := teleportType;
end;

function setupTeleportLocation(teleportType: ETeleportType; item: TRSItem; destination: String; worldPoint: TPoint): TTeleportLocation; overload;
begin
  result.worldPoint := worldPoint;
  result.destination := destination;
  result.item := item;
  result.teleportType := teleportType;
end;

function setupTeleportLocation(teleportType: ETeleportType; destination: String; worldPoint: TPoint; dispatcherRing: Boolean = True): TTeleportLocation; overload;
begin
  result.worldPoint := worldPoint;
  result.destination := destination;
  result.teleportType := teleportType;
  result.dispatcherRing := dispatcherRing;
end;

procedure QuickSortTele(var AI: array of TTeleportLocation; ALo, AHi: Integer; closestPoint: TPoint);
var
  Lo, Hi: Integer;
  Pivot: Double;
  T: TTeleportLocation;
begin
  Lo := ALo;
  Hi := AHi;
  Pivot := AI[(Lo + Hi) div 2].worldPoint.DistanceTo(closestPoint);
  repeat
    while AI[Lo].worldPoint.DistanceTo(closestPoint) < Pivot do
      Inc(Lo) ;
    while AI[Hi].worldPoint.DistanceTo(closestPoint) > Pivot do
      Dec(Hi) ;
    if Lo <= Hi then
    begin
      T := AI[Lo];
      AI[Lo] := AI[Hi];
      AI[Hi] := T;
      Inc(Lo) ;
      Dec(Hi) ;
    end;
  until Lo > Hi;
  if Hi > ALo then
    QuickSortTele(AI, ALo, Hi, closestPoint) ;
  if Lo < AHi then
    QuickSortTele(AI, Lo, AHi, closestPoint) ;
end;

function getTeleportJewellery(): array of TTeleportJewellery;
begin
  Result := [
    setupTeleportJewellery('amulet of glory', 'amulet of glory(1..6)'),
    setupTeleportJewellery('ring of wealth', 'ring of wealth (1..5)'),
    setupTeleportJewellery('skills necklace', 'skills necklace(1..6)'),
    setupTeleportJewellery('combat bracelet', 'combat bracelet(1..6)'),
    setupTeleportJewellery('ring of dueling', 'ring of dueling(1..8)'),
    setupTeleportJewellery('slayer ring', 'slayer ring (1..8)'),
    setupTeleportJewellery('digsite pendant', 'digsite pendant (1..5)'),
    setupTeleportJewellery('necklace of passage', 'necklace of passage(1..5)'),
    setupTeleportJewellery('games necklace', 'games necklace(1..8)')
  ];
end;

function getDiaryTeleports(): array of TDiaryTeleportItem;
begin
  Result := [
    setupDiaryTeleportItem('ardougne cloak'),
    setupDiaryTeleportItem('karamja gloves'),
    setupDiaryTeleportItem("explorer's ring")
  ];
end;

function getChargedJewelleryNames(unchargedName: TRSItem): TRSItemArray;
var
  jewellery: TTeleportJewellery;
begin
  for jewellery in getTeleportJewellery() do
    if ToStr(jewellery.unchargedName) = ToStr(unchargedName).Lower() then
      Exit(jewellery.chargedNames);

  raise unchargedName + ' does not match any jewellery in getTeleportJewellery';
end;

function getNumberedDiaryItems(baseItem: TRSItem): TRSItemArray;
var
  diaryTeleport: TDiaryTeleportItem;
begin
  for diaryTeleport in getDiaryTeleports() do
    if diaryTeleport.baseItem = ToString(baseItem).Lower() then
      Exit(diaryTeleport.numberedItems);

  raise baseItem + ' does not match any item in getDiaryTeleports';
end;
