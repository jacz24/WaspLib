(*
Cuboids
=======
This file has cuboid related methods.
*)

{$DEFINE WL_TCUBOID_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

type
  TCuboid = record
    Top: TRectangle;
    Bottom: TRectangle;
  end;
  TCuboidArray = array of TCuboid;

function TCuboid.ConvexHull(): TPointArray;
begin
  Result := TPointArray(Self.Top.ToTPA() + Self.Bottom.ToTPA()).ConvexHull();
end;

function TCuboid.Center(): TPoint;
var
  tpa: TPointArray;
begin
  tpa := [Self.Bottom.Mean(), Self.Top.Mean()];
  Result := tpa.Mean();
end;

function TCuboid.Bounds(): TBox;
begin
  Result := TPointArray(Self.Top.ToTPA() + Self.Bottom.ToTPA()).Bounds();
end;

function TCuboid.Edges(): TPointArray;
begin
  Result := Self.ConvexHull().Connect();
end;

function TCuboid.ShapeFill(): TPointArray;
begin
  Result := Self.Edges().ShapeFill();
end;


function TCuboid.Filter(testSet: TPointArray): TPointArray;
var
  i, count: UInt32;
  hull: TPointArray;
begin
  if (High(testSet) < 0) then
    Exit;

  SetLength(Result, Length(testSet));
  count := 0;
  hull := Self.ConvexHull();
  for i := 0 to High(testSet) do
    if PointInPolygon(testSet[i], hull) then
    begin
      Result[count] := testSet[i];
      Inc(count);
    end;

  SetLength(Result, count);
end;

function TCuboid.Rotate(angleRad: Double): TCuboid;
begin
  Result.Top := Self.Top.Rotate(angleRad);
  Result.Bottom := Self.Bottom.Rotate(angleRad);
end;


procedure TMufasaBitmap.DrawCuboid(cuboid: TCuboid; color: Integer = $0000FF); overload;
begin
  Self.DrawTPA(cuboid.Edges(), color);
end;

procedure Debug(cuboid: TCuboid; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboid(cuboid, color);
  bitmap.Debug();
  bitmap.Free();
end;


procedure TMufasaBitmap.DrawCuboidArray(cuboids: TCuboidArray; color: Integer = $0000FF); overload;
var
  c: TCuboid;
begin
  for c in cuboids do
    Self.DrawCuboid(c, color);
end;

procedure Debug(cuboids: TCuboidArray; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboidArray(cuboids, color);
  bitmap.Debug();
  bitmap.Free();
end;


type
  TCuboidEx = record(TCuboid)
    Hull: TPointArray;
    Edge: TPointArray;
    Fill: TPointArray;
    Box: TBox;
  end;

  TCuboidExArray = array of TCuboidEx;

function TCuboidEx.ConvexHull(): TPointArray; override;
begin
  if Self.Hull <> [] then
    Exit(Self.Hull);
  Result := inherited;
  Self.Hull := Result;
end;

function TCuboidEx.Bounds(): TBox; override;
begin
  if Self.Box <> [] then
    Exit(Self.Box);
  Result := inherited;
  Self.Box := Result;
end;

function TCuboidEx.Edges(): TPointArray; override;
begin
  if Self.Edge <> [] then
    Exit(Self.Edge);
  Result := Self.ConvexHull().Connect();
  Self.Edge := Result;
end;

function TCuboidEx.ShapeFill(): TPointArray; override;
begin
  if Self.Fill <> [] then
    Exit(Self.Fill);
  Result := Self.Edges().ShapeFill();
  Self.Fill := Result;
end;


function TCuboidEx.Filter(testSet: TPointArray): TPointArray; override;
var
  i, count: UInt32;
begin
  if (High(testSet) < 0) then
    Exit;

  SetLength(Result, Length(testSet));
  count := 0;
  for i := 0 to High(testSet) do
    if PointInPolygon(testSet[i], Self.ConvexHull()) then
    begin
      Result[count] := testSet[i];
      Inc(count);
    end;

  SetLength(Result, count);
end;

function TCuboidEx.Rotate(angleRad: Double): TCuboidEx; overload;
begin
  Result.Top := Self.Top.Rotate(angleRad);
  Result.Bottom := Self.Bottom.Rotate(angleRad);
  Result.Hull := [];
  Result.Edge := [];
  Result.Fill := [];
  Result.Box := [];
end;


procedure TMufasaBitmap.DrawCuboid(cuboid: TCuboidEx; color: Integer = $0000FF); overload;
begin
  Self.DrawTPA(cuboid.Edges(), color);
end;

procedure Debug(cuboid: TCuboidEx; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboid(cuboid, color);
  bitmap.Debug();
  bitmap.Free();
end;


procedure TMufasaBitmap.DrawCuboidArray(cuboids: TCuboidExArray; color: Integer = $0000FF); overload;
var
  c: TCuboidEx;
begin
  for c in cuboids do
    Self.DrawCuboid(c, color);
end;

procedure Debug(cuboids: TCuboidExArray; color: Integer = $0000FF); overload;
var
  bitmap: TMufasaBitmap;
begin
  bitmap.FromClient();
  bitmap.DrawCuboidArray(cuboids, color);
  bitmap.Debug();
  bitmap.Free();
end;
