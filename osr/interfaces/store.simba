{$DEFINE AERO_STORE_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSStore = type TRSTitledInteface;


function TRSStore.FindItemBoundaries(): TBoxArray;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  area, b: TBox;
begin
  area := Self.GetItemBoxes().Merge();

  if SRL.FindColors(tpa, RS_ITEM_BORDER, area) > 0 then
  begin
    atpa := tpa.Cluster(50, 3);

    for b in atpa.ToTBA() do
    begin
      if b.Height() <= 5 then
        Continue;

      Result += Grid(8, 1, 32, b.Height(), [15], [area.X1, b.Y1 - 1]);
    end;
  end;
end;

procedure TRSStore.Setup(); override;
begin
  inherited;

  Self.Name := 'Store';
  Self.ItemInterface.Name := Self.Name + '.ItemInterface';
  Self.ItemInterface.GetSearchBoxesFunction := @Self.FindItemBoundaries;
end;

procedure TRSStore.SetupAlignment(Mode: ERSClientMode); override;
begin
  inherited;

  case Self.Mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 487;
        Self.Alignment.Center.MaxHeight := 300;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 487;
        Self.Alignment.Center.MaxHeight := 300;
      end;
  end;
end;

function TRSStore.GetItemBoxes: TBoxArray;
begin
  Result := Grid(8, 5, 35, 32, [12, 16], [Self.X1 + 61, Self.Y1 + 40])
end;

function TRSStore.IsOpen: Boolean;
var
  B: TBox;
  Txt: String;
begin
  B := Self.Bounds();
  B.X1 += 50;
  B.Y1 := B.Y2 - 26;
  B.X2 -= 50;
  B.Y2 -= 9;
  B.LimitTo(Self.Bounds);

  Txt := OCR.Recognize(B, TOCRThresholdFilter.Create(15), RS_FONT_PLAIN_12);
  Result := 'shop' in Txt;
end;

function TRSStore.IsOpen(WaitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), WaitTime);
end;

function TRSStore.Close(PressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(PressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

function TRSStore.FindItem(item: TRSItem; out box: TBox): Boolean;
begin
  if not Self.IsOpen() then
    Exit;

  Result := Self.ItemInterface.Find([item], box);
end;


function TRSStore.FindAll(items: TRSItemArray; out boxes: TBoxArray): Boolean;
begin
  Result := Self.ItemInterface.FindAll(items, boxes);
end;


function TRSStore.ContainsItem(item: TRSItem): Boolean;
var
  b: TBox;
begin
  Result := Self.FindItem(item, b);
end;

function TRSStore.ContainsAny(itemArray: TRSItemArray): Boolean;
begin
  Result := Self.ItemInterface.ContainsAny(itemArray);
end;

function TRSStore.ContainsAll(itemArray: TRSItemArray): Boolean;
var
  tba: TBoxArray;
begin
  Result := Self.FindAll(itemArray, tba);
end;


function TRSStore.CountItemStack(item: TRSItem): Int32;
begin
  Result := Self.ItemInterface.CountStack(item);
end;

function TRSStore.HoverItem(Item: TRSItem): Boolean;
var
  Box: TBox;
begin
  Result := Self.FindItem(Item, Box);
  if Result then
    Mouse.Move(Box);
end;

function TRSStore.ClickItem(Item: TRSItem; Option: String = ''): Boolean;
begin
  if Self.HoverItem(Item) then
  begin
    if (Option <> '') then
      Result := ChooseOption.Select(Option)
    else
    begin
      Mouse.Click(MOUSE_LEFT);

      Result := True;
    end;
  end;
end;

procedure TRSStore.Draw(Bitmap: TMufasaBitmap); override;
begin
  if not Self.IsOpen() then
    Exit;

  inherited;

  Bitmap.DrawBoxes(Self.GetItemBoxes(), $00FFFF);
end;

var
  Store: TRSStore;

function TRSGameTabs.GetCurrentTab(): ERSGametab; override;
begin
  Result := inherited;

  if (Result = ERSGameTab.UNKNOWN) and Store.IsOpen() then
    Result := ERSGameTab.INVENTORY;
end;

procedure TRSClient.ClientModeChanged; override;
begin
  inherited;

  Store.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup; override;
begin
  inherited;

  Store.Setup();
end;

procedure TSRL.Debug(Bitmap: TMufasaBitmap); override;
begin
  inherited;

  Store.Draw(Bitmap);
end;
