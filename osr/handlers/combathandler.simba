(*
CombatHandler
=============
CombatHandler is a record made to handle combat.

This is not made to handle literally every scenario, specially bossing is not
recommended as custom made methods will probably perform much better, but for
for general purpose combat this should be enough!
*)

{$DEFINE WL_COMBATHANDLER_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}
{$IFNDEF WL_LOOTHANDLER_INCLUDED}
  {$I WaspLib/osr/handlers/loothandler.simba}
{$ENDIF}

const
  WEAPONS: TRSItemArray = [
    'Ghrazi rapier', 'Blade of saeldor (c)', 'Inquisitor''s mace',
    'Toktz-xil-ak', 'Abyssal whip', 'Abyssal bludgeon',
    'Abyssal dagger', 'Abyssal dagger (p++)', 'Saradomin sword',
    'Dragon scimitar', 'Dragon sword', 'Dragon longsword',
    'Dharok''s greataxe', 'Sarachnis cudgel', 'Dinh''s bulwark',
    'Dragon hunter lance', 'Abyssal tentacle', 'Granite hammer',
    'Bow of faerdhinen (c)', 'Toxic blowpipe', 'Magic shortbow',
    'Magic shortbow (i)', 'Armadyl crossbow', 'Dragon hunter crossbow',
    'Dragon crossbow', 'Rune crossbow', 'Adamant dart', 'Mithril dart',
    'Rune scimitar', 'Dorgeshuun crossbow', 'Leaf-bladed sword', 'Null'
  ];

  SHIELDS: TRSItemArray = [
    'Avernic defender', 'Dragon defender', 'Rune defender',
    'Adamant defender', 'Mithril defender', 'Black defender',
    'Steel defender', 'Iron defender', 'Bronze defender',
    'Dragonfire shield', 'Toktz-ket-xil', 'Twisted buckler',
    'Dragonfire ward', 'Odium ward', 'Book of law',
    'Book of darkness', 'Unholy book', 'Book of war', 'Rune kiteshield',
    'Null'
  ];

  SPEC_WEAPONS: TRSItemArray = [
    'Dragon claws', '4153', '12848', 'Granite maul', 'Abyssal dagger',
    'Abyssal dagger (p++)', 'Dragon dagger', 'Dragon dagger(p++)',
    'Dragon sword', 'Dragon longsword', 'Dinh''s bulwark', 'Abyssal tentacle',
    'Saradomin godsword', 'Granite hammer', 'Toxic blowpipe', 'Magic shortbow',
    'Magic shortbow (i)', 'Armadyl crossbow', 'Dragon crossbow', 'Dragon thrownaxe',
    'Null'
  ];

  BRACELETS: TRSItemArray = [
    'Bracelet of slaughter',
    'Expeditious bracelet',
    'Null'
  ];

  DWARF_CANNON: TRSItemArray = [
    'Cannon base',
    'Cannon stand',
    'Cannon barrels',
    'Cannon furnace'
  ];

  CANNON_BALLS: TRSItemArray = [
    'Cannonball',
    'Granite cannonball'
  ];

  REMAINS: TRSItemArray = [
    'Bones', 'Wolf bones', 'Monkey bones', 'Bat bones', 'Big bones',
    'Jogre bones', 'Zogre bones', 'Babydragon bones', 'Wyrm bones',
    'Wyvern bones', 'Dragon bones', 'Drake bones', 'Lava dragon bones',
    'Hydra bones', 'Dagannoth bones', 'Superior dragon bones',
    'Fiendish ashes', 'Vile ashes', 'Malicious ashes',
    'Abyssal ashes', 'Infernal ashes'
  ];

type CombatHandler = record(TSRLBaseRecord) class var
    State: String;
    Monster: TRSMonster;
    MonsterWalkerCoord: TPoint;

    BraceletTimer, InCombatTimer: TCountDown;

    CombatStyle: TRSCombatStyle;

    Weapon, Shield, SpecWeapon, Bracelet: TRSItem;

    MinHitPoints, MinPrayPoints, WeaponSpec, AttackMonsterDelay: Int32;

    ManageGear, GearIsSetup, AutoRetaliateEnabled, QuickPrayerIsSetup,
    HandleHealth, HandlePrayer, HandlePoison, HandleVenom, HandleAntifire,
    HandleBoosts, HandleCannon, CannonIsSetup, DoingSpec,
    SlayerTaskFinishedVisible, SlayerTaskFinished, LootEnabled, BuryBones,
    IsFighting, FinishedCombat, IsSetup: Boolean;

    LootHandler: TRSLootHandler;
  end;

procedure CombatHandler.DebugLn(text: String); constref; override;
var
  timeStamp: String;
begin
  timeStamp := SRL.TimeStamp();
  text := timeStamp + ':[CombatHandler]: ' + text;
  WriteLn text;
end;

procedure CombatHandler.Fatal(text: String); constref; override;
begin
  text := SRL.TimeStamp + ':[CombatHandler]:[Fatal]: ' + text;
  WriteLn(text);
  if WL.LogFile <> '' then
    WriteFileContents(WL.LogFile, text + STR_NEW_LINE, True);
  SaveScreenshot('fatal/CombatHandler', True);
  TerminateScript;
end;

procedure CombatHandler._SetupGear(); static;
begin
  if CombatHandler.GearIsSetup then
    Exit;

  ItemFinder.AddItemName('Saradomin godsword', '20372');

  for CombatHandler.Weapon in WEAPONS do
  begin
    if (CombatHandler.Weapon = 'Null') then
      Break;
    if Equipment.ContainsItem(CombatHandler.Weapon) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(CombatHandler.Weapon), 1);
      Break;
    end;
  end;
  CombatHandler.DebugLn('Current weapon: ' + ToStr(CombatHandler.Weapon) + '.');

  for CombatHandler.Shield in SHIELDS do
  begin
    if (CombatHandler.Shield = 'Null') then
      Break;
    if Equipment.ContainsItem(CombatHandler.Shield) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(CombatHandler.Shield), 1);
      Break;
    end;
  end;
  CombatHandler.DebugLn('Current shield: ' + ToStr(CombatHandler.Shield) + '.');

  if Equipment.ContainsItem('Bonecrusher necklace') then
    Antiban.Skills += ERSSkill.PRAYER;

  for CombatHandler.SpecWeapon in SPEC_WEAPONS do
  begin
    if (CombatHandler.SpecWeapon = 'Null') then
      Break;
    if Inventory.ContainsItem(CombatHandler.SpecWeapon) then
    begin
      Delete(RSAlchHandler.ItemArray, RSAlchHandler.ItemArray.Find(CombatHandler.SpecWeapon), 1);
      Break;
    end;
  end;

  if Inventory.ContainsAny(['Bonecrusher', 'Bonecrusher necklace', 'Ash sanctifier']) then
    Antiban.Skills += ERSSkill.PRAYER;

  if CombatHandler.SpecWeapon <> 'Null' then
    CombatHandler.WeaponSpec := WeaponData.GetInt(ToStr(CombatHandler.SpecWeapon), 'special_attack')
  else
  begin
    if CombatHandler.Weapon <> 'Null' then
      CombatHandler.WeaponSpec := WeaponData.GetInt(CombatHandler.Weapon, 'special_attack');

    if (CombatHandler.WeaponSpec > 0) then
      CombatHandler.SpecWeapon := CombatHandler.Weapon;
  end;

  if CombatHandler.SpecWeapon <> 'Null' then
    CombatHandler.DebugLn('Current spec weapon: ' + ToStr(CombatHandler.SpecWeapon) +
                 '. With ' + ToStr(CombatHandler.WeaponSpec) + '% spec.');

  for CombatHandler.Bracelet in BRACELETS do
    if (CombatHandler.Bracelet = 'Null') or Inventory.ContainsItem(CombatHandler.Bracelet) then
      Break;

  if (CombatHandler.Bracelet <> 'Null') then
  begin
    CombatHandler.DebugLn('Current slayer bracelet: ' + ToStr(CombatHandler.Bracelet) + '.');
    CombatHandler.BraceletTimer.Setup(15 * ONE_MINUTE);
  end;

  CombatHandler.GearIsSetup := (CombatHandler.Weapon <> 'Null') or (CombatHandler.Shield <> 'Null') or
                 (CombatHandler.SpecWeapon <> 'Null') or (CombatHandler.Bracelet <> 'Null');
end;

procedure CombatHandler.Setup(rsMonster: TRSMonster; timer: Int64 = 12000); static;
begin
  if CombatHandler.IsSetup then
    Exit;

  if CombatHandler.AttackMonsterDelay = 0 then
    CombatHandler.AttackMonsterDelay := 5000;

  CombatHandler.InCombatTimer.Setup(Timer);

  if not RSClient.IsLoggedIn() then
    Login.LoginPlayer();

  ChatButtons.Open(ERSChatButton.GAME_CHAT);
  CombatHandler.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);

  if CombatHandler.HandleHealth := Inventory.ContainsAny(FOOD_ARRAY) then
  begin
    CombatHandler.DebugLn('Food detected and will be used.');
    FoodHandler.MinInvPoints := 1;
    FoodHandler.Setup(ERSConsumable.FOOD_CONSUMABLE);
  end;

  if CombatHandler.HandleBoosts := Inventory.ContainsAny(BOOST_ARRAY) then
  begin
    CombatHandler.DebugLn('Boost potions detected, they will be used.');
    BoostHandler.MinInvPoints := 1;
    BoostHandler.Setup(ERSConsumable.BOOST_CONSUMABLE);
  end;

  if CombatHandler.HandlePrayer := Inventory.ContainsAny(PRAYER_ARRAY) then
  begin
    CombatHandler.DebugLn('Prayer potions detected, prayer will be used.');
    PrayerHandler.MinInvPoints := 1;
    PrayerHandler.Setup(ERSConsumable.PRAYER_CONSUMABLE);
  end;

  if CombatHandler.HandlePoison := Inventory.ContainsAny(ANTI_POISON_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti poison potions detected, they will be used.');
    PoisonHandler.MinInvPoints := 1;
    PoisonHandler.Setup(ERSConsumable.POISON_CONSUMABLE);
  end;

  if CombatHandler.HandleVenom := Inventory.ContainsAny(ANTI_VENOM_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti venom potions detected, they will be used.');
    VenomHandler.MinInvPoints := 1;
    VenomHandler.Setup(ERSConsumable.VENOM_CONSUMABLE);
  end;

  if CombatHandler.HandleAntifire := Inventory.ContainsAny(ANTI_FIRE_ARRAY) then
  begin
    CombatHandler.DebugLn('Anti fire potions detected, they will be used.');
    AntifireHandler.MinInvPoints := 1;
    AntifireHandler.Setup(ERSConsumable.ANTI_FIRE_CONSUMABLE);
  end;

  CombatHandler.HandleCannon := Inventory.ContainsAll(DWARF_CANNON) and
                       Inventory.ContainsAny(CANNON_BALLS);

  if CombatHandler.HandleCannon then
    CombatHandler.DebugLn('Cannon and cannonballs detected. Cannon will be used.');

  CombatHandler.AutoRetaliateEnabled := Combat.GetAutoRetaliate();

  CombatHandler.Monster := rsMonster;
  CombatHandler.IsSetup := True;
end;

procedure CombatHandler.Setup(manage: Boolean; rsMonster: TRSMonster; lootValue: Int32 = 5000; timer: Int64 = 4000); static; overload;
begin
  if CombatHandler.IsSetup then
    Exit;

  CombatHandler.Setup(rsMonster, timer);

  if manage then
  begin
    CombatHandler.ManageGear := True;
    CombatHandler._SetupGear();
    CombatHandler.LootHandler.Setup(rsMonster, lootValue);
    CombatHandler.LootEnabled := CombatHandler.LootHandler.IsSetup;
  end;

  DebugMonsterArray += rsMonster;
end;

function CombatHandler.WaitHitSplats(): Boolean; static;
var
  t: UInt64;
  i: Int32;
  tmp, splats: TRSHitsplatArray;
  b: TBox;
begin
  t := GetTickCount() + 3000;
  b := MainScreen.GetPlayerBox();
  repeat
    tmp := MainScreen.FindHitsplats();

    for i := 0 to High(tmp) do
      if not b.Contains(tmp[i].Position) then
        splats += tmp[i];

    Result := splats <> [];
    if Result then
      Break;
  until GetTickCount() > t;

  if Result then
  begin
    CombatHandler.MonsterWalkerCoord := ScriptWalker^.MSToWorld(splats[0].Position, Round(CombatHandler.Monster.ShapeArray[0].Tile.Z/2));
    CombatHandler.IsFighting := True;
  end;
end;

function CombatHandler.AttackMonster(): Boolean; static;
begin
  Result := CombatHandler.WaitHitSplats();

  if not Result and CombatHandler.Monster.SelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := CombatHandler.WaitHitSplats();
  end;

  if Result then
  begin
    if CombatHandler.DoingSpec then
      CombatHandler.DoingSpec := False;
    CombatHandler.InCombatTimer.Restart(Random(0, 2000));
  end;
end;

function CombatHandler.WalkAttackMonster(): Boolean; static;
begin
  if not CombatHandler.Monster.Filter.Walker then
    Exit(CombatHandler.AttackMonster());

  Result := CombatHandler.WaitHitSplats();

  if not Result and CombatHandler.Monster.WalkSelectOption(['Attack'], 3) then
  begin
    Minimap.WaitMoving();
    Result := CombatHandler.WaitHitSplats();
  end;

  if Result then
  begin
    if CombatHandler.DoingSpec then
      CombatHandler.DoingSpec := False;
    CombatHandler.InCombatTimer.Restart(Random(0, 2000));
  end;
end;


function CombatHandler.FightingMonster(): Boolean; static;
var
  cuboid: TCuboidEx;
begin
  cuboid := ScriptWalker^.GetCuboidMS(CombatHandler.MonsterWalkerCoord, CombatHandler.Monster.ShapeArray[0]);
  Result := MainScreen.FindHPBars(cuboid.Bounds()) <> [];
end;


function CombatHandler.Loot(): Boolean; static;
var
  match: TRSItemFinderMatch;
  cuboid: TCuboidEx;
begin
  CombatHandler.FinishedCombat := False;
  cuboid := ScriptWalker^.GetCuboidMS(CombatHandler.MonsterWalkerCoord, CombatHandler.Monster.ShapeArray[0]);
  if Result := CombatHandler.LootHandler.CheckLoot(cuboid) then
  begin
    Wait(400, 600);

    if not RSAlchHandler.Disabled then
    begin
      match := Inventory.ItemInterface.FindAny(RSAlchHandler.ItemArray);
      if match <> [] then
      begin
        RSAlchHandler.Item := match.Item;
        RSAlchHandler.CastAlchemy();
      end;
    end;
  end;
end;



function CombatHandler.CheckBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear;
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  Result := (CombatHandler.Bracelet <> 'Null') and Equipment.ContainsItem(CombatHandler.Bracelet);

  if Result then
    CombatHandler.BraceletTimer.Restart(Random((-2 * ONE_MINUTE), (2 * ONE_MINUTE)));
end;

function CombatHandler.NeedBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup then
    Exit;

  Result := (CombatHandler.Bracelet <> 'Null') and CombatHandler.BraceletTimer.IsFinished() and
            Inventory.ContainsItem(CombatHandler.Bracelet) and not CombatHandler.CheckBracelet();
end;

function CombatHandler.EquipBracelet(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup or (CombatHandler.Bracelet = 'Null') then
    Exit;

  Result := Inventory.ClickItem(CombatHandler.Bracelet);

  if Result then
  begin
    CombatHandler.BraceletTimer.Restart();
    if not CombatHandler.AutoRetaliateEnabled then
      CombatHandler.InCombatTimer.Timeout := GetTickCount();
  end;
end;


function CombatHandler.NeedRegear(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  Result := ((CombatHandler.Weapon <> 'Null') and Inventory.ContainsItem(CombatHandler.Weapon)) or
            ((CombatHandler.Shield <> 'Null') and Inventory.ContainsItem(CombatHandler.Shield));

  CombatHandler.DoingSpec := not Result;
end;

function CombatHandler.ReGear(): Boolean; static;
begin
  if not CombatHandler.ManageGear or not CombatHandler.GearIsSetup then
    Exit;

  repeat
    if (CombatHandler.Weapon <> 'Null') then
      begin Inventory.ClickItem(CombatHandler.Weapon); Wait(600, 800); end;
    if (CombatHandler.Shield <> 'Null') then
      begin Inventory.ClickItem(CombatHandler.Shield); Wait(600, 800); end;

    Result := WaitUntil(not CombatHandler.NeedRegear(), 100, 3000);
  until Result;

  if not CombatHandler.AutoRetaliateEnabled then
    CombatHandler.InCombatTimer.Timeout := GetTickCount();
end;


function CombatHandler.CanSpec(): Boolean; static;
begin
  if not CombatHandler.ManageGear then
    Exit;

  if not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  if (CombatHandler.WeaponSpec = 0) then
    Exit;

  if (CombatHandler.SpecWeapon = 'Null') or (CombatHandler.Weapon = 'Null') then
    Exit;

  Result := (Minimap.GetSpecLevel() >= CombatHandler.WeaponSpec) and
            ((CombatHandler.SpecWeapon = CombatHandler.Weapon) or Inventory.ContainsItem(CombatHandler.Weapon) or
            (Inventory.ContainsItem(CombatHandler.SpecWeapon) and Inventory.HasSpace(1)));
  CombatHandler.DoingSpec := Result;
end;

function CombatHandler.DoSpec(): Boolean; static;
begin
  if CombatHandler.ManageGear and not CombatHandler.GearIsSetup then
  begin
    CombatHandler._SetupGear();
    CombatHandler.ManageGear := CombatHandler.GearIsSetup;
    if not CombatHandler.GearIsSetup then
      Exit;
  end;

  if (CombatHandler.SpecWeapon <> CombatHandler.Weapon) and Inventory.ClickItem(CombatHandler.SpecWeapon) then
    if not WaitUntil(Inventory.ContainsItem(CombatHandler.Weapon), 100, 4000) then
      Exit;

  CombatHandler.InCombatTimer.Timeout := GetTickCount();
  Result := CombatHandler.DoingSpec := Minimap.EnableSpec(CombatHandler.WeaponSpec);

  case CombatHandler.SpecWeapon of
    'Granite maul', '4153', '12848':
      begin
        Result := CombatHandler.DoingSpec := True;
        Wait(50, 100);
      end;
    else
      Wait(300, 400);
  end;

  if Result and (Minimap.GetSpecLevel() < CombatHandler.WeaponSpec) then
    CombatHandler.Regear();
end;


function CombatHandler.DoBuryBones(): Boolean; static;
var
  slots: TIntegerArray;
  slot: Int32;
begin
  if not Inventory.FindItems(REMAINS, slots) then
    Exit;

  slot := slots[0];

  Inventory.ClickSlot(slot);
  Inventory.WaitItemFade(slot);
  Result := WaitUntil(not Inventory.IsSlotUsed(slot), 100, 2000);
end;


function CombatHandler.NeedAntiPoison(): Boolean; static;
begin
  if not CombatHandler.HandlePoison and not CombatHandler.HandleVenom then
    Exit;

  Result := PoisonHandler.NeedToConsume() or VenomHandler.NeedToConsume() or
            Minimap.IsPoisoned() or Minimap.IsEnvenomed();
end;

function CombatHandler.NeedAntifire(): Boolean; static;
begin
  Result := CombatHandler.HandleAntifire and AntifireHandler.NeedToConsume();
end;

function CombatHandler.NeedBoost(): Boolean; static;
begin
  Result := CombatHandler.HandleBoosts and BoostHandler.NeedToConsume();
end;


function CombatHandler.Terminate(): Boolean; static;
begin
  if not MainScreen.FindGrave() then
  begin
    Magic.CastSpell(ERSSpell.VARROCK_TELEPORT);
    Wait(10000);
  end;

  Result := Logout.ClickLogout();
  CombatHandler.Fatal('Last state: ' + CombatHandler.State);
end;


procedure CombatHandler.CheckSlayerTask(); static;
begin
  if not CombatHandler.SlayerTaskFinishedVisible and CombatHandler.SlayerTaskFinished then
    Exit;

  if CombatHandler.SlayerTaskFinishedVisible then
    CombatHandler.SlayerTaskFinishedVisible := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED])
  else
    CombatHandler.SlayerTaskFinished := Chat.FindMessage('Slayer master', [CHAT_COLOR_RED]);
end;


function CombatHandler.WaitCombatEnd(): Boolean; static;
begin
  Result := MainScreen.WaitNotInCombat(3000);
  CombatHandler.FinishedCombat := Result;
end;


//Check for pending action combat handler is taking care of.
function CombatHandler.GetConsumableState(): String; static;
var
  prayCache: Int32;
begin
  if (Minimap.GetHPLevel() <= CombatHandler.MinHitPoints) then
  begin
    if CombatHandler.HandleHealth then
      Exit('EAT_FOOD');

    Exit('LOW_HEALTH');
  end;

  if CombatHandler.HandlePrayer then
  begin
    prayCache := Minimap.GetPrayerLevel();

    if (prayCache > 0) and not Minimap.IsPrayerEnabled() then
      Exit('ENABLE_QPRAY');

    if (prayCache <= CombatHandler.MinPrayPoints) then
    begin
      if Inventory.ContainsConsumable(ERSConsumable.PRAYER_CONSUMABLE) then
        Exit('DRINK_PRAYER');

      Exit('LOW_PRAYER');
    end;
  end;

  if CombatHandler.NeedAntifire() then
  begin
    if Inventory.ContainsConsumable(ERSConsumable.ANTI_FIRE_CONSUMABLE) then
      Exit('DRINK_ANTIFIRE');

    Exit('NO_ANTIFIRE');
  end;

  if CombatHandler.NeedAntiPoison() then
  begin
    if CombatHandler.HandleVenom and Inventory.ContainsConsumable(ERSConsumable.VENOM_CONSUMABLE) then
      Exit('DRINK_ANTIVENOM');

    if CombatHandler.HandlePoison and Inventory.ContainsConsumable(ERSConsumable.POISON_CONSUMABLE) then
      Exit('DRINK_ANTIPOISON');
  end;
end;

function CombatHandler.GetState(): String; static;
var
  str: String;
begin
  str := CombatHandler.GetConsumableState();
  if str <> '' then
    Exit(str);

  if MainScreen.FindGrave() then
    Exit('PLAYER_DEAD');

  CombatHandler.CheckSlayerTask();

  if CombatHandler.NeedBracelet() then
    Exit('NEED_BRACELET');

  if CombatHandler.NeedBoost() then
    Exit('DRINK_BOOST');

  if CombatHandler.DoingSpec and CombatHandler.CanSpec() then
    Exit('SPEC_MONSTER');

  if CombatHandler.CanSpec() then
    Exit('USE_SPECIAL_ATT');

  if CombatHandler.NeedRegear() then
    Exit('REEQUIP_GEAR');

  if CombatHandler.BuryBones and Inventory.ContainsAny(REMAINS) then
    Exit('BURY_BONES');

  if CombatHandler.IsFighting then
    Exit('WAIT_IN_COMBAT');

  if CombatHandler.LootEnabled and CombatHandler.FinishedCombat then
    Exit('DO_LOOT');

  Result := 'ATTACK_MONSTER';
end;


//Check for pending action combat handler is taking care of and do them.
procedure CombatHandler.DoActions(handlerState: String = ''); static;
begin
  if handlerState = '' then
    handlerState := CombatHandler.GetState();
  CombatHandler.State := handlerState;

  case handlerState of
    'EAT_FOOD':         Inventory.Consume(ERSConsumable.FOOD_CONSUMABLE);
    'DRINK_PRAYER':     Inventory.Consume(ERSConsumable.PRAYER_CONSUMABLE);
    'DRINK_ANTIFIRE':   Inventory.Consume(ERSConsumable.ANTI_FIRE_CONSUMABLE);
    'DRINK_ANTIVENOM':  Inventory.Consume(ERSConsumable.VENOM_CONSUMABLE);
    'DRINK_ANTIPOISON': Inventory.Consume(ERSConsumable.POISON_CONSUMABLE);
    'DRINK_BOOST':      Inventory.Consume(ERSConsumable.BOOST_CONSUMABLE);
    'ENABLE_QPRAY':     Minimap.EnablePrayer();
    'NEED_BRACELET':    CombatHandler.EquipBracelet();
    'SPEC_MONSTER':     CombatHandler.WalkAttackMonster();
    'USE_SPECIAL_ATT':  CombatHandler.DoSpec();
    'REEQUIP_GEAR':     CombatHandler.ReGear();
    'BURY_BONES':       CombatHandler.DoBuryBones();
    'ATTACK_MONSTER':   CombatHandler.WalkAttackMonster();
    'WAIT_IN_COMBAT':   CombatHandler.WaitCombatEnd();
    'DO_LOOT':          CombatHandler.Loot();
    'LOW_HEALTH', 'LOW_PRAYER', 'NO_ANTIFIRE', 'PLAYER_DEAD':
      CombatHandler.Terminate();
  else
    raise 'CombatHandler.DoActions received non-registered HandlerState: ' + HandlerState;
  end;
end;


function TRSXPBar.EarnedXP(currentXP: Int32): Boolean; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and Result then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;


function TRSMainScreen.FindHitsplats(): TRSHitsplatArray; override;
begin
  Result := inherited;

  if CombatHandler.IsSetup and (Result <> []) then
    CombatHandler.InCombatTimer.Restart(Random(0, 3000));
end;

function TRSMainScreen.FindDepletedHPBar(): Boolean;
var
  Bar: TRSHPBar;
begin
  for Bar in Self.FindHPBars() do
    if Bar.Percent = 0 then
      Exit(True);
end;

function TRSMainScreen.InCombat(): Boolean; override;
var
  gotXP, hasSplats: Boolean;
begin
  if CombatHandler.InCombatTimer.IsFinished() and not XPBar.EarnedXP() then
  begin
    CombatHandler.IsFighting := False;
    Exit;
  end;

  gotXP := XPBar.EarnedXP();
  hasSplats := Self.FindHitsplats() <> [];

  Result := gotXP or hasSplats or CombatHandler.FightingMonster();

  CombatHandler.IsFighting := Result;
  if Result then
    WL.Activity.Restart();

  if gotXP or hasSplats then
    CombatHandler.InCombatTimer.Restart();
end;



//TODO: NEED TO REVIEW EVERYTHING BELOW. This is probably all useless or not used.
function TRSPrayer.HasProperPrayers(): Boolean;
var
  prayer: ERSPrayer;
  activePrayers: ERSPrayerArray;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.COMBAT_UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType;

  activePrayers := Self.GetActivePrayers();

  case CombatHandler.CombatStyle.CombatType of
    COMBAT_RANGED:
      for prayer in RANGED_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);

    COMBAT_MELEE:
      for prayer in MELEE_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);

    COMBAT_MAGIC:
      for prayer in MAGIC_PRAYERS do
         if activePrayers.Find(prayer) > -1 then
           Exit(True);
  end;
end;

function TRSPrayer.FixPrayers(): Boolean;
var
  i: Int32;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.COMBAT_UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType();

  case CombatHandler.CombatStyle.CombatType of
    COMBAT_RANGED:
      for i := 0 to Ord(High(RANGED_PRAYERS)) do
        if Self.ActivatePrayer(RANGED_PRAYERS[i]) then
          Exit(True);

    COMBAT_MELEE:
        for i := 0 to Ord(High(MELEE_PRAYERS)) do
        begin
          if i > 1 then
          begin
            if Self.ActivatePrayer([MELEE_PRAYERS[i], MELEE_PRAYERS[i + 1]]) then
              Exit(True);

            i += 1;
          end
          else if Self.ActivatePrayer(MELEE_PRAYERS[i]) then
            Exit(True);
        end;

    COMBAT_MAGIC:
      for i := 0 to Ord(High(MAGIC_PRAYERS)) do
        if Self.ActivatePrayer(MAGIC_PRAYERS[i]) then
          Exit(True);
  end;
end;


function TRSQuickPrayer.SelectBestPrayers(): Boolean;
var
  i: Int32;
begin
  if CombatHandler.CombatStyle.CombatType = ERSCombatType.COMBAT_UNKNOWN then
    CombatHandler.CombatStyle.GetCombatType();

  if not Self.Open() then
    Exit;

  case CombatHandler.CombatStyle.CombatType of
    COMBAT_RANGED:
      for i := 0 to High(RANGED_PRAYERS) do
        if Result := Self.SelectPrayer(RANGED_PRAYERS[i]) then
          Break;

    COMBAT_MELEE:
        for i := 0 to High(MELEE_PRAYERS) do
        begin
          if i > 1 then
          begin
            if Result := Self.SelectPrayer([MELEE_PRAYERS[i], MELEE_PRAYERS[i + 1]]) then
              Break;

            i += 1;
          end
          else if Result := Self.SelectPrayer(MELEE_PRAYERS[i]) then
            Break;
        end;

    COMBAT_MAGIC:
      for i := 0 to High(MAGIC_PRAYERS) do
        if Result := Self.SelectPrayer(MAGIC_PRAYERS[i]) then
          Break;
  end;

  Self.Close();
end;


function TRSMinimap.EnablePrayer(checkPrayers: Boolean): Boolean; overload;
begin
  if checkPrayers and (CombatHandler.CombatStyle.CombatType = ERSCombatType.COMBAT_UNKNOWN) then
    CombatHandler.CombatStyle.GetCombatType();

  Result := Self.EnablePrayer();

  if Result and checkPrayers then
  begin
    if CombatHandler.QuickPrayerIsSetup or not Prayer.Open() then
      Exit;

    if Prayer.HasProperPrayers() then
    begin
      CombatHandler.QuickPrayerIsSetup := True;
      Exit;
    end;

    Prayer.FixPrayers();

    CombatHandler.QuickPrayerIsSetup := QuickPrayer.SelectBestPrayers();
  end;
end;
